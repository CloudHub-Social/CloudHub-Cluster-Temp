name: "Terraform Staging"

on:
  pull_request:
    # types:
    #   - opened
    branches:
      - "main"
    paths:
      - "terraform/**"
  workflow_dispatch:

env:
  name: stg
  TF_CLOUD_ORGANIZATION: "${{ vars.TF_CLOUD_ORGANIZATION }}"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "${{ vars.TF_WORKSPACE }}"
  TF_WORKING_DIR: "./terraform"
  PLURALITH_ORG_ID: "${{ vars.PLURALITH_ORG_ID }}"
  PLURALITH_PROJECT_ID: "${{ vars.PLURALITH_PROJECT_ID }}"

permissions:
  contents: write
  pull-requests: write

defaults:
  run:
    working-directory: ./terraform
    shell: bash

jobs:
  terraform-plan:
    name: "Terraform Plan (Staging)"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
        shell: bash

    environment: stg
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # - name: Plan
      #   id: plan
      #   run: terraform plan -no-color -input=false
      #   continue-on-error: true

      # Set up and authenticate Pluralith
      - name: Pluralith Init
        # uses: Pluralith/actions/init@v1.4.0
        uses: Just-Insane/pluralith-actions/init@e5d17b2206d59f65419079e2c51db6b9096ddcfd
        with:
          terraform-path: "${{ env.TF_WORKING_DIR }}"
          api-key: "${{ secrets.PLURALITH_API_KEY }}"
          org-id: "${{ vars.PLURALITH_ORG_ID }}"
          project-id: "${{ vars.PLURALITH_PROJECT_ID }}"

      - name: Pluralith Run Plan
        id: plan
        # uses: Pluralith/actions/run@v1.4.0
        uses: Just-Insane/pluralith-actions/run@e5d17b2206d59f65419079e2c51db6b9096ddcfd
        with:
          terraform-command: "plan"
          terraform-path: "${{ env.TF_WORKING_DIR }}"
          title: "${{ env.name }}"
          show-changes: true
          show-drift: true
          show-costs: false

      - name: Pluralith Comment
        id: comment
        uses: Just-Insane/pluralith-actions/comment@e5d17b2206d59f65419079e2c51db6b9096ddcfd
        with:
          terraform-path: "${{ env.TF_WORKING_DIR }}"
          target-type: pull-request
        continue-on-error: true

      - name: truncate terraform plan result
        run: |
          plan=$(cat <<'EOF'
          ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
          EOF
          )
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "${plan:0:65536}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${{ env.PLAN }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  # manual-approval:
  #   name: "Manual Approval (Staging)"
  #   runs-on: ubuntu-latest
  #   needs: terraform-plan
  #   environment:
  #     name: stg
  #   steps:
  #     - name: Wait for Approval
  #       uses: trstringer/manual-approval@v1
  #       with:
  #         approvers: Just-Insane

  terraform-apply:
    name: "Terraform Apply (Staging)"
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment:
      name: stg
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # - name: Terraform Apply
      #   id: apply
      #   run: terraform apply -no-color -input=false -auto-approve

      # Set up and authenticate Pluralith
      - name: Pluralith Init
        # uses: Pluralith/actions/init@v1.4.0
        uses: Just-Insane/pluralith-actions/init@e5d17b2206d59f65419079e2c51db6b9096ddcfd
        with:
          terraform-path: "${{ env.TF_WORKING_DIR }}"
          api-key: "${{ secrets.PLURALITH_API_KEY }}"
          org-id: "${{ vars.PLURALITH_ORG_ID }}"
          project-id: "${{ vars.PLURALITH_PROJECT_ID }}"

      - name: Pluralith Run Apply
        id: apply
        # uses: Pluralith/actions/run@v1.4.0
        uses: Just-Insane/pluralith-actions/run@e5d17b2206d59f65419079e2c51db6b9096ddcfd
        with:
          terraform-command: "apply"
          terraform-path: "${{ env.TF_WORKING_DIR }}"
          title: "${{ env.name }}"
          show-changes: true
          show-drift: true
          show-costs: false

      - name: Pluralith Comment
        id: comment
        uses: Just-Insane/pluralith-actions/comment@e5d17b2206d59f65419079e2c51db6b9096ddcfd
        with:
          terraform-path: "${{ env.TF_WORKING_DIR }}"
          target-type: pull-request
        continue-on-error: true

      - name: truncate terraform apply result
        run: |
          apply=$(cat <<'EOF'
          ${{ format('{0}{1}', steps.apply.outputs.stdout, steps.apply.outputs.stderr) }}
          EOF
          )
          echo "APPLY<<EOF" >> $GITHUB_ENV
          echo "${apply:0:65536}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        # env:
        #   APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Apply üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Apply</summary>

            \`\`\`\n
            ${{ env.APPLY }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
